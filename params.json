{"name":"Lavalamp","tagline":"A text editor theme that visually differentiates languages.","body":"![](http://cl.ly/image/320J0E0d2p3W/content)\r\n\r\n### Lavalamp is a WIP text editor theme.\r\n\r\n**It currently works in Vim, but I hope to port it to Atom and Sublime Text.**\r\n\r\n====\r\n\r\n### Installation\r\n\r\nCopy `lavalamp.vim` to your `.vim/colors` directory.\r\n\r\n    $ cd lavalamp/vim\r\n    $ cp lavalamp.vim ~/.vim/colors/\r\n\r\nThen update your `.vimrc` with these lines:\r\n\r\n    syntax enable\r\n    set background=dark\r\n    colorscheme lavalamp\r\n\r\nIf you're using [airline](https://github.com/bling/vim-airline), you can install the lavalamp theme for that.\r\n\r\n    $ cd lavalamp/vim/autoload/airline/themes\r\n    $ cp lavalamp.vim ~/.vim/autoload/airline/themes/\r\n\r\nFor the iTerm theme, you should be able to double-click on the `lavalamp/iterm/lavalamp.itermcolors` file to install it.\r\n\r\n**If you're using CoffeeScript, I highly recommend installing the [vim-coffee-script](https://github.com/kchmck/vim-coffee-script) plugin since it offers much better syntax highlighting (which lavalamp utilizes).**\r\n\r\nFor xterm, you should copy the contents of `xterm/Xresources` to your `~/.Xresources`.\r\n\r\n#### Terminal Vim\r\n\r\nIf you're running Vim in a terminal (as opposed to MacVim, etc.) this colorscheme won't work by default. You can use the [CSApprox](http://www.vim.org/scripts/script.php?script_id=2390) plugin to get it working though. You also may need to add this line to your `.vimrc`:\r\n\r\n    set t_Co=256\r\n\r\n### Design principles\r\n\r\nThe idea behind the theme is that each language has its own core color. This way, it's easier to visually differentiate languages when they're used together.\r\n\r\nFor example, HTML uses shades of blue while Ruby uses red. Then it's easy to see your ERB tags:\r\n\r\n![](http://cl.ly/image/3X091e0c3U11/content)\r\n\r\nCSS uses purple (an homage to [@mdo](https://github.com/mdo)):\r\n\r\n![](http://cl.ly/image/0W223O123E1t/content)\r\n\r\nIn a Sass file, it's easy to see vanilla CSS vs. Sass (which is red, since it's Ruby):\r\n\r\n![](http://cl.ly/image/10100y1Q3g25/content)\r\n\r\n\r\nI've chosen green for Javascript:\r\n\r\n![](http://cl.ly/image/1d3H3Q3V0j0p/content)\r\n\r\nAnd browns for Coffeescript:\r\n\r\n![](http://cl.ly/image/3x0k3Q262g0m/content)\r\n\r\nThe iTerm and Terminal themes look like so:\r\n\r\n![](http://cl.ly/image/0y0Q1N2O1D0A/content)\r\n\r\n\r\n### Contributing\r\n\r\n1. Fork it ( http://github.com/jasonlong/lavalamp/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\nIf you'd like to add support for addtional languages, you'll need to add new entries for each syntax scope. I have found [vim-HiLinkTrace](https://github.com/gerw/vim-HiLinkTrace) to be very handy for figuring out what a given scope a character is in. Once you've installed that (via Vundle, NeoBundle, etc.), you can add a keyboard shortcut to your `.vimrc`. This is what I use:\r\n\r\n````\r\nnmap <leader>h :HLT<CR>\r\n````\r\n\r\nThen, when your cursor is over a character you want to know about, hit `<leader>h` and the syntax scope will be shown at the bottom of your Vim window. Create a new line with this in `lavalamp.vim`.\r\n\r\n### Roadmap\r\n\r\nI've been using this theme for a while in this state since these are the languages I mostly use. If more people want to use the theme, more languages will need to be fleshed out.\r\n\r\nAnd I'd really :heart: some help getting this working with Atom and Sublime as similarly as possible.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}